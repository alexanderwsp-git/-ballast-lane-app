trigger:
  branches:
    include:
      - main
      - feature/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: 'non-prod'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Job'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
      displayName: 'Build Application'

- stage: Test
  dependsOn: Build
  displayName: 'Test Stage'
  jobs:
  - job: TestJob
    displayName: 'Test Job'
    steps:
    - script: |
        npm run test
      displayName: 'Run Tests'

- stage: PushDockerImage
  dependsOn: Test
  displayName: 'Push Docker Image Stage'
  jobs:
  - job: PushDockerImageJob
    displayName: 'Push Docker Image Job'
    steps:
    - task: Cache@2
      displayName: Cache task
      inputs:
        key: 'docker | "$(Agent.OS)" | cache'
        path: $(Pipeline.Workspace)/docker
        cacheHitVar: CACHE_RESTORED                #Variable to set to 'true' when the cache is restored
      
    - script: |
        docker load -i $(Pipeline.Workspace)/docker/cache.tar
      displayName: Docker restore
      condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))

    - script: |
        docker build -t $(AZURE_CONTAINER_REGISTRY)/$(Build.Repository.Name):$(Build.BuildNumber) .
        docker login $(ACR_PASSWORD) -u $(ACR_USERNAME) -p $(AZURE_CONTAINER_REGISTRY)
        docker push $(AZURE_CONTAINER_REGISTRY)/$(Build.Repository.Name):$(Build.BuildNumber)
      displayName: 'Build and Push Docker Image'

    - script: |
        mkdir -p $(Pipeline.Workspace)/docker
        docker save -o $(Pipeline.Workspace)/docker/cache.tar $(repository):$(tag)
      displayName: Docker save
      condition: and(not(canceled()), not(failed()), ne(variables.CACHE_RESTORED, 'true'))

